bits 16
ORG 0x1000

; Here we go
APEntry:
	cli ; Disable interrupts
	cld ; Clear direction. Ensure memory ops go forward through memory

	;We'll do the IDT from C++ once we're in 64bit long mode

	;GDT
	lgdt [APEntryDataGDTLimit]

	mov ax, 0x8
	mov ds, ax ;Clear the data segments
	mov ss, ax

	;Prepare the stack
	mov esp, [APEntryDataStackHigh]
	mov ebp, [APEntryDataStackHigh]

	; Enable A20 line (access memory >1MB)
	in al, 0x92
    or al, 0x2
    out 0x92, al

	; Set PE flag to enter protected mode
	mov eax, cr0
	or eax, 1
	mov cr0, eax

	jmp 0x8:APEntryProtected32bit ;Set 32bit code segment

	hlt ;Should never get here

bits 32

align 32
APEntryProtected32bit:
	hlt
	
	mov eax, [APEntryDataEntryFunction]
	jmp eax ;Jump to APEntryFunction

    hlt ;Should never get here

align 32

GDTTableNull dq 0x0
GDTTableCode dq 0x00CF9A000000FFFF
GDTTableData dq 0x00CF9200000000FFFF
GDTTableEnd  dq 0x0

GDTLimitPad dw 0xCCCC
APEntryDataGDTLimit dw (GDTTableEnd - GDTTableNull - 1)
APEntryDataGDTBase dd GDTTableNull

APEntryDataStackHigh dd 0x0
APEntryDataEntryFunction dd 0x0
