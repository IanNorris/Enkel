bits 16
ORG 0x1000

; Here we go
APEntry:
	cli ; Disable interrupts
	cld ; Clear direction. Ensure memory ops go forward through memory

	;We'll do the IDT from C++ once we're in 64bit long mode

	;GDT
	lgdt [APEntryDataGDTLimit]

	mov ax, 0x8
	mov ds, ax ;Clear the data segments
	mov ss, ax

	;Prepare the stack
	mov esp, [APEntryDataStackHigh]
	mov ebp, [APEntryDataStackHigh]

	; Set PE flag to enter protected mode
	mov eax, cr0
	or eax, 1
	mov cr0, eax

	jmp 0x8:APEntryProtected32bit ;Set 32bit code segment

	hlt ;Should never get here

bits 32

align 32
APEntryProtected32bit:
	cli
	hlt

	mov eax, [APEntryDataEntryFunction]
	jmp eax ;Jump to APEntryFunction

    hlt ;Should never get here

align 32

GDTTableNull dd 0x0, 0x0
GDTTableCode dd 0x0000FFFF, 0x008F9200
GDTTableData dd 0x00000068, 0x00CF8900
GDTTableEnd  dd 0x0, 0x0

GDTLimitPad dw 0x0
APEntryDataGDTLimit dw (GDTTableEnd - GDTTableNull - 1)
APEntryDataGDTBase dq GDTTableNull

APEntryDataStackHigh dd 0x0
APEntryDataEntryFunction dd 0x0
